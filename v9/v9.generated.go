// Code generated by rejonson. DO NOT EDIT.

package rejonson

import (
	"context"
	"github.com/KromDaniel/rejonson"
	"github.com/go-redis/redis/v9"
)

// ---- JsonGet ----
func JsonGet(processor RedisProcessor, ctx context.Context, key string, args ...interface{}) *redis.StringCmd {
	paramsToItf := make([]interface{}, 0, 3-1+len(args))
	paramsToItf = append(paramsToItf, "JSON.GET")
	paramsToItf = append(paramsToItf, key)
	paramsToItf = append(paramsToItf, args...)
	cmd := redis.NewStringCmd(ctx, paramsToItf...)
	// ignore returned error, it is part of the cmd
	_ = processor.Process(ctx, cmd)
	return cmd
}
func (processor *Client) JsonGet(ctx context.Context, key string, args ...interface{}) *redis.StringCmd {
	return JsonGet(processor, ctx, key, args...)
}
func (processor *Pipeline) JsonGet(ctx context.Context, key string, args ...interface{}) *redis.StringCmd {
	return JsonGet(processor, ctx, key, args...)
}

// ---- JsonDel ----
func JsonDel(processor RedisProcessor, ctx context.Context, key string, args ...interface{}) *redis.IntCmd {
	paramsToItf := make([]interface{}, 0, 3-1+len(args))
	paramsToItf = append(paramsToItf, "JSON.DEL")
	paramsToItf = append(paramsToItf, key)
	paramsToItf = append(paramsToItf, args...)
	cmd := redis.NewIntCmd(ctx, paramsToItf...)
	// ignore returned error, it is part of the cmd
	_ = processor.Process(ctx, cmd)
	return cmd
}
func (processor *Client) JsonDel(ctx context.Context, key string, args ...interface{}) *redis.IntCmd {
	return JsonDel(processor, ctx, key, args...)
}
func (processor *Pipeline) JsonDel(ctx context.Context, key string, args ...interface{}) *redis.IntCmd {
	return JsonDel(processor, ctx, key, args...)
}

// ---- JsonSet ----
func JsonSet(processor RedisProcessor, ctx context.Context, key string, path string, json string, args ...interface{}) *redis.StatusCmd {
	paramsToItf := make([]interface{}, 0, 5-1+len(args))
	paramsToItf = append(paramsToItf, "JSON.SET")
	paramsToItf = append(paramsToItf, key)
	paramsToItf = append(paramsToItf, path)
	paramsToItf = append(paramsToItf, json)
	paramsToItf = append(paramsToItf, args...)
	cmd := redis.NewStatusCmd(ctx, paramsToItf...)
	// ignore returned error, it is part of the cmd
	_ = processor.Process(ctx, cmd)
	return cmd
}
func (processor *Client) JsonSet(ctx context.Context, key string, path string, json string, args ...interface{}) *redis.StatusCmd {
	return JsonSet(processor, ctx, key, path, json, args...)
}
func (processor *Pipeline) JsonSet(ctx context.Context, key string, path string, json string, args ...interface{}) *redis.StatusCmd {
	return JsonSet(processor, ctx, key, path, json, args...)
}

// ---- JsonMGet ----
func JsonMGet(processor RedisProcessor, ctx context.Context, key string, args ...interface{}) *redis.StringSliceCmd {
	paramsToItf := make([]interface{}, 0, 3-1+len(args))
	paramsToItf = append(paramsToItf, "JSON.MGET")
	paramsToItf = append(paramsToItf, key)
	paramsToItf = append(paramsToItf, args...)
	cmd := redis.NewStringSliceCmd(ctx, paramsToItf...)
	// ignore returned error, it is part of the cmd
	_ = processor.Process(ctx, cmd)
	return cmd
}
func (processor *Client) JsonMGet(ctx context.Context, key string, args ...interface{}) *redis.StringSliceCmd {
	return JsonMGet(processor, ctx, key, args...)
}
func (processor *Pipeline) JsonMGet(ctx context.Context, key string, args ...interface{}) *redis.StringSliceCmd {
	return JsonMGet(processor, ctx, key, args...)
}

// ---- JsonType ----
func JsonType(processor RedisProcessor, ctx context.Context, key string, path string) *redis.StringCmd {
	paramsToItf := make([]interface{}, 0, 3)
	paramsToItf = append(paramsToItf, "JSON.TYPE")
	paramsToItf = append(paramsToItf, key)
	paramsToItf = append(paramsToItf, path)
	cmd := redis.NewStringCmd(ctx, paramsToItf...)
	// ignore returned error, it is part of the cmd
	_ = processor.Process(ctx, cmd)
	return cmd
}
func (processor *Client) JsonType(ctx context.Context, key string, path string) *redis.StringCmd {
	return JsonType(processor, ctx, key, path)
}
func (processor *Pipeline) JsonType(ctx context.Context, key string, path string) *redis.StringCmd {
	return JsonType(processor, ctx, key, path)
}

// ---- JsonNumIncrBy ----
func JsonNumIncrBy(processor RedisProcessor, ctx context.Context, key string, path string, value int) *redis.StringCmd {
	paramsToItf := make([]interface{}, 0, 4)
	paramsToItf = append(paramsToItf, "JSON.NUMINCRBY")
	paramsToItf = append(paramsToItf, key)
	paramsToItf = append(paramsToItf, path)
	paramsToItf = append(paramsToItf, value)
	cmd := redis.NewStringCmd(ctx, paramsToItf...)
	// ignore returned error, it is part of the cmd
	_ = processor.Process(ctx, cmd)
	return cmd
}
func (processor *Client) JsonNumIncrBy(ctx context.Context, key string, path string, value int) *redis.StringCmd {
	return JsonNumIncrBy(processor, ctx, key, path, value)
}
func (processor *Pipeline) JsonNumIncrBy(ctx context.Context, key string, path string, value int) *redis.StringCmd {
	return JsonNumIncrBy(processor, ctx, key, path, value)
}

// ---- JsonNumMultBy ----
func JsonNumMultBy(processor RedisProcessor, ctx context.Context, key string, path string, value int) *redis.StringCmd {
	paramsToItf := make([]interface{}, 0, 4)
	paramsToItf = append(paramsToItf, "JSON.NUMMULTBY")
	paramsToItf = append(paramsToItf, key)
	paramsToItf = append(paramsToItf, path)
	paramsToItf = append(paramsToItf, value)
	cmd := redis.NewStringCmd(ctx, paramsToItf...)
	// ignore returned error, it is part of the cmd
	_ = processor.Process(ctx, cmd)
	return cmd
}
func (processor *Client) JsonNumMultBy(ctx context.Context, key string, path string, value int) *redis.StringCmd {
	return JsonNumMultBy(processor, ctx, key, path, value)
}
func (processor *Pipeline) JsonNumMultBy(ctx context.Context, key string, path string, value int) *redis.StringCmd {
	return JsonNumMultBy(processor, ctx, key, path, value)
}

// ---- JsonStrAppend ----
func JsonStrAppend(processor RedisProcessor, ctx context.Context, key string, path string, value string) *redis.IntCmd {
	paramsToItf := make([]interface{}, 0, 4)
	paramsToItf = append(paramsToItf, "JSON.STRAPPEND")
	paramsToItf = append(paramsToItf, key)
	paramsToItf = append(paramsToItf, path)
	paramsToItf = append(paramsToItf, value)
	cmd := redis.NewIntCmd(ctx, paramsToItf...)
	// ignore returned error, it is part of the cmd
	_ = processor.Process(ctx, cmd)
	return cmd
}
func (processor *Client) JsonStrAppend(ctx context.Context, key string, path string, value string) *redis.IntCmd {
	return JsonStrAppend(processor, ctx, key, path, value)
}
func (processor *Pipeline) JsonStrAppend(ctx context.Context, key string, path string, value string) *redis.IntCmd {
	return JsonStrAppend(processor, ctx, key, path, value)
}

// ---- JsonStrLen ----
func JsonStrLen(processor RedisProcessor, ctx context.Context, key string, path string) *redis.IntCmd {
	paramsToItf := make([]interface{}, 0, 3)
	paramsToItf = append(paramsToItf, "JSON.STRLEN")
	paramsToItf = append(paramsToItf, key)
	paramsToItf = append(paramsToItf, path)
	cmd := redis.NewIntCmd(ctx, paramsToItf...)
	// ignore returned error, it is part of the cmd
	_ = processor.Process(ctx, cmd)
	return cmd
}
func (processor *Client) JsonStrLen(ctx context.Context, key string, path string) *redis.IntCmd {
	return JsonStrLen(processor, ctx, key, path)
}
func (processor *Pipeline) JsonStrLen(ctx context.Context, key string, path string) *redis.IntCmd {
	return JsonStrLen(processor, ctx, key, path)
}

// ---- JsonArrAppend ----
func JsonArrAppend(processor RedisProcessor, ctx context.Context, key string, path string, args ...interface{}) *redis.IntCmd {
	paramsToItf := make([]interface{}, 0, 4-1+len(args))
	paramsToItf = append(paramsToItf, "JSON.ARRAPPEND")
	paramsToItf = append(paramsToItf, key)
	paramsToItf = append(paramsToItf, path)
	paramsToItf = append(paramsToItf, args...)
	cmd := redis.NewIntCmd(ctx, paramsToItf...)
	// ignore returned error, it is part of the cmd
	_ = processor.Process(ctx, cmd)
	return cmd
}
func (processor *Client) JsonArrAppend(ctx context.Context, key string, path string, args ...interface{}) *redis.IntCmd {
	return JsonArrAppend(processor, ctx, key, path, args...)
}
func (processor *Pipeline) JsonArrAppend(ctx context.Context, key string, path string, args ...interface{}) *redis.IntCmd {
	return JsonArrAppend(processor, ctx, key, path, args...)
}

// ---- JsonArrIndex ----
func JsonArrIndex(processor RedisProcessor, ctx context.Context, key string, path string, value interface{}, startAndStop ...interface{}) *redis.IntCmd {
	paramsToItf := make([]interface{}, 0, 5-1+len(startAndStop))
	paramsToItf = append(paramsToItf, "JSON.ARRINDEX")
	paramsToItf = append(paramsToItf, key)
	paramsToItf = append(paramsToItf, path)
	paramsToItf = append(paramsToItf, value)
	paramsToItf = append(paramsToItf, startAndStop...)
	cmd := redis.NewIntCmd(ctx, paramsToItf...)
	// ignore returned error, it is part of the cmd
	_ = processor.Process(ctx, cmd)
	return cmd
}
func (processor *Client) JsonArrIndex(ctx context.Context, key string, path string, value interface{}, startAndStop ...interface{}) *redis.IntCmd {
	return JsonArrIndex(processor, ctx, key, path, value, startAndStop...)
}
func (processor *Pipeline) JsonArrIndex(ctx context.Context, key string, path string, value interface{}, startAndStop ...interface{}) *redis.IntCmd {
	return JsonArrIndex(processor, ctx, key, path, value, startAndStop...)
}

// ---- JsonArrInsert ----
func JsonArrInsert(processor RedisProcessor, ctx context.Context, key string, path string, index int, values ...interface{}) *redis.IntCmd {
	paramsToItf := make([]interface{}, 0, 5-1+len(values))
	paramsToItf = append(paramsToItf, "JSON.ARRINSERT")
	paramsToItf = append(paramsToItf, key)
	paramsToItf = append(paramsToItf, path)
	paramsToItf = append(paramsToItf, index)
	paramsToItf = append(paramsToItf, values...)
	cmd := redis.NewIntCmd(ctx, paramsToItf...)
	// ignore returned error, it is part of the cmd
	_ = processor.Process(ctx, cmd)
	return cmd
}
func (processor *Client) JsonArrInsert(ctx context.Context, key string, path string, index int, values ...interface{}) *redis.IntCmd {
	return JsonArrInsert(processor, ctx, key, path, index, values...)
}
func (processor *Pipeline) JsonArrInsert(ctx context.Context, key string, path string, index int, values ...interface{}) *redis.IntCmd {
	return JsonArrInsert(processor, ctx, key, path, index, values...)
}

// ---- JsonArrLen ----
func JsonArrLen(processor RedisProcessor, ctx context.Context, key string, path string) *redis.IntCmd {
	paramsToItf := make([]interface{}, 0, 3)
	paramsToItf = append(paramsToItf, "JSON.ARRLEN")
	paramsToItf = append(paramsToItf, key)
	paramsToItf = append(paramsToItf, path)
	cmd := redis.NewIntCmd(ctx, paramsToItf...)
	// ignore returned error, it is part of the cmd
	_ = processor.Process(ctx, cmd)
	return cmd
}
func (processor *Client) JsonArrLen(ctx context.Context, key string, path string) *redis.IntCmd {
	return JsonArrLen(processor, ctx, key, path)
}
func (processor *Pipeline) JsonArrLen(ctx context.Context, key string, path string) *redis.IntCmd {
	return JsonArrLen(processor, ctx, key, path)
}

// ---- JsonArrPop ----
func JsonArrPop(processor RedisProcessor, ctx context.Context, key string, path string, index int) *redis.StringCmd {
	paramsToItf := make([]interface{}, 0, 4)
	paramsToItf = append(paramsToItf, "JSON.ARRPOP")
	paramsToItf = append(paramsToItf, key)
	paramsToItf = append(paramsToItf, path)
	paramsToItf = append(paramsToItf, index)
	cmd := redis.NewStringCmd(ctx, paramsToItf...)
	// ignore returned error, it is part of the cmd
	_ = processor.Process(ctx, cmd)
	return cmd
}
func (processor *Client) JsonArrPop(ctx context.Context, key string, path string, index int) *redis.StringCmd {
	return JsonArrPop(processor, ctx, key, path, index)
}
func (processor *Pipeline) JsonArrPop(ctx context.Context, key string, path string, index int) *redis.StringCmd {
	return JsonArrPop(processor, ctx, key, path, index)
}

// ---- JsonArrTrim ----
func JsonArrTrim(processor RedisProcessor, ctx context.Context, key string, path string, start int, stop int) *redis.IntCmd {
	paramsToItf := make([]interface{}, 0, 5)
	paramsToItf = append(paramsToItf, "JSON.ARRTRIM")
	paramsToItf = append(paramsToItf, key)
	paramsToItf = append(paramsToItf, path)
	paramsToItf = append(paramsToItf, start)
	paramsToItf = append(paramsToItf, stop)
	cmd := redis.NewIntCmd(ctx, paramsToItf...)
	// ignore returned error, it is part of the cmd
	_ = processor.Process(ctx, cmd)
	return cmd
}
func (processor *Client) JsonArrTrim(ctx context.Context, key string, path string, start int, stop int) *redis.IntCmd {
	return JsonArrTrim(processor, ctx, key, path, start, stop)
}
func (processor *Pipeline) JsonArrTrim(ctx context.Context, key string, path string, start int, stop int) *redis.IntCmd {
	return JsonArrTrim(processor, ctx, key, path, start, stop)
}

// ---- JsonObjKeys ----
func JsonObjKeys(processor RedisProcessor, ctx context.Context, key string, path string) *redis.StringSliceCmd {
	paramsToItf := make([]interface{}, 0, 3)
	paramsToItf = append(paramsToItf, "JSON.OBJKEYS")
	paramsToItf = append(paramsToItf, key)
	paramsToItf = append(paramsToItf, path)
	cmd := redis.NewStringSliceCmd(ctx, paramsToItf...)
	// ignore returned error, it is part of the cmd
	_ = processor.Process(ctx, cmd)
	return cmd
}
func (processor *Client) JsonObjKeys(ctx context.Context, key string, path string) *redis.StringSliceCmd {
	return JsonObjKeys(processor, ctx, key, path)
}
func (processor *Pipeline) JsonObjKeys(ctx context.Context, key string, path string) *redis.StringSliceCmd {
	return JsonObjKeys(processor, ctx, key, path)
}

// ---- JsonObjLen ----
func JsonObjLen(processor RedisProcessor, ctx context.Context, key string, path string) *redis.IntCmd {
	paramsToItf := make([]interface{}, 0, 3)
	paramsToItf = append(paramsToItf, "JSON.OBJLEN")
	paramsToItf = append(paramsToItf, key)
	paramsToItf = append(paramsToItf, path)
	cmd := redis.NewIntCmd(ctx, paramsToItf...)
	// ignore returned error, it is part of the cmd
	_ = processor.Process(ctx, cmd)
	return cmd
}
func (processor *Client) JsonObjLen(ctx context.Context, key string, path string) *redis.IntCmd {
	return JsonObjLen(processor, ctx, key, path)
}
func (processor *Pipeline) JsonObjLen(ctx context.Context, key string, path string) *redis.IntCmd {
	return JsonObjLen(processor, ctx, key, path)
}

// RedisProcessor is redis client or pipeline instance that will process a command
type RedisProcessor interface {
	Process(context.Context, redis.Cmder) error
}

/*
Client is an extended redis.Client, stores a pointer to the original redis.Client
*/
type Client struct {
	*redis.Client
}

/*
Pipeline is an extended redis.Pipeline, stores a pointer to the original redis.Pipeliner
*/
type Pipeline struct {
	redis.Pipeliner
}

func (cl *Client) Pipeline() *Pipeline {
	pip := cl.Client.Pipeline()
	return ExtendPipeline(pip)
}

func (cl *Client) TXPipeline() *Pipeline {
	pip := cl.Client.TxPipeline()
	return ExtendPipeline(pip)
}
func (pl *Pipeline) Pipeline() *Pipeline {
	pip := pl.Pipeliner.Pipeline()
	return ExtendPipeline(pip)
}

func ExtendClient(client *redis.Client) *Client {
	return &Client{
		client,
	}
}

func ExtendPipeline(pipeline redis.Pipeliner) *Pipeline {
	return &Pipeline{
		pipeline,
	}
}